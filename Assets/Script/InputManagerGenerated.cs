//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Footsies
{
    public partial class @InputManagerGenerated: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputManagerGenerated()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionMap"",
    ""maps"": [
        {
            ""name"": ""menu"",
            ""id"": ""28372d37-467f-4fb8-926b-703c0ada4173"",
            ""actions"": [
                {
                    ""name"": ""submit"",
                    ""type"": ""Button"",
                    ""id"": ""09b76aac-cae6-4371-b70d-b9592926e541"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""navigate"",
                    ""type"": ""Button"",
                    ""id"": ""fd20cb78-a057-4e6c-bece-5fa275d00f0e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""296a1dce-b8c6-4b8d-9780-52ef8b049a93"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ff41563-86da-4f60-af07-7338f3616da6"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""5ceb0d4f-6b41-4c86-a290-af777c6c1cd0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9b338fb8-fddd-42fb-86a8-3bbb29bb0a80"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ca3f29a6-2af3-4f27-a7af-33f2fb7c75a7"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ec1d7559-8eb9-43b4-8ec7-ce0bef01d84b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""efbb1c97-8017-4314-8857-9b5fe9a80e1d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""gameplay"",
            ""id"": ""42f730aa-17f1-4ec3-a504-47badca29211"",
            ""actions"": [
                {
                    ""name"": ""p1Left"",
                    ""type"": ""Button"",
                    ""id"": ""86a7d7f0-4b0d-4a97-94d0-959cc7ba9c01"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""p1Right"",
                    ""type"": ""Button"",
                    ""id"": ""11effbee-9c0d-47ab-be5c-e1a2c59a3051"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""p1Attack"",
                    ""type"": ""Button"",
                    ""id"": ""f5f1eb90-9e76-4a0b-9811-b68df71a4f56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""p2Left"",
                    ""type"": ""Button"",
                    ""id"": ""c4f9f35b-5b49-4546-85b0-13253e479501"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""p2Right"",
                    ""type"": ""Button"",
                    ""id"": ""828b63f6-5f70-49d7-9173-8f4d21cba9bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""p2Attack"",
                    ""type"": ""Button"",
                    ""id"": ""12aa18f2-379f-4ea3-8946-8c2d0570bd39"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""cancel"",
                    ""type"": ""Button"",
                    ""id"": ""bb19745a-9966-4f44-8fad-d7b760184703"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""debugDraw"",
                    ""type"": ""Button"",
                    ""id"": ""403b4314-00e1-4554-8dee-1a5026d8d688"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""debugPause"",
                    ""type"": ""Button"",
                    ""id"": ""2d68a120-57c9-49c7-882f-e28c0448883c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""debugPauseAdvance"",
                    ""type"": ""Button"",
                    ""id"": ""ee106363-39b7-4a6a-b260-a4ab32170111"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3034581e-0968-4951-a8ff-cd0fdd081307"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""p1Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da09ac1b-4125-4201-ba40-bbe1a5f6abcd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""p1Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""abd4149e-67c3-4f83-bd31-c4ffec6c0a71"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""p1Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aeb4dd13-e0ee-416f-ab6f-45c20d8267db"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""p2Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""daec662b-de50-4d78-bede-fca4785af748"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""p2Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d828d542-f30d-42c5-8c60-4b3e78d89f18"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""p2Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0212513-d118-4193-8c9d-43f43aa50fa9"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d8077b6-1f32-4fe6-87c4-e0a3a54cf39a"",
                    ""path"": ""<Keyboard>/f12"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""debugDraw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c53e938-0d7f-41f2-a589-22222aa783e6"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""debugPause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30900ff9-2ff8-4906-b838-e6c2e3b6eca1"",
                    ""path"": ""<Keyboard>/f2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""debugPauseAdvance"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // menu
            m_menu = asset.FindActionMap("menu", throwIfNotFound: true);
            m_menu_submit = m_menu.FindAction("submit", throwIfNotFound: true);
            m_menu_navigate = m_menu.FindAction("navigate", throwIfNotFound: true);
            // gameplay
            m_gameplay = asset.FindActionMap("gameplay", throwIfNotFound: true);
            m_gameplay_p1Left = m_gameplay.FindAction("p1Left", throwIfNotFound: true);
            m_gameplay_p1Right = m_gameplay.FindAction("p1Right", throwIfNotFound: true);
            m_gameplay_p1Attack = m_gameplay.FindAction("p1Attack", throwIfNotFound: true);
            m_gameplay_p2Left = m_gameplay.FindAction("p2Left", throwIfNotFound: true);
            m_gameplay_p2Right = m_gameplay.FindAction("p2Right", throwIfNotFound: true);
            m_gameplay_p2Attack = m_gameplay.FindAction("p2Attack", throwIfNotFound: true);
            m_gameplay_cancel = m_gameplay.FindAction("cancel", throwIfNotFound: true);
            m_gameplay_debugDraw = m_gameplay.FindAction("debugDraw", throwIfNotFound: true);
            m_gameplay_debugPause = m_gameplay.FindAction("debugPause", throwIfNotFound: true);
            m_gameplay_debugPauseAdvance = m_gameplay.FindAction("debugPauseAdvance", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // menu
        private readonly InputActionMap m_menu;
        private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
        private readonly InputAction m_menu_submit;
        private readonly InputAction m_menu_navigate;
        public struct MenuActions
        {
            private @InputManagerGenerated m_Wrapper;
            public MenuActions(@InputManagerGenerated wrapper) { m_Wrapper = wrapper; }
            public InputAction @submit => m_Wrapper.m_menu_submit;
            public InputAction @navigate => m_Wrapper.m_menu_navigate;
            public InputActionMap Get() { return m_Wrapper.m_menu; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
            public void AddCallbacks(IMenuActions instance)
            {
                if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
                @submit.started += instance.OnSubmit;
                @submit.performed += instance.OnSubmit;
                @submit.canceled += instance.OnSubmit;
                @navigate.started += instance.OnNavigate;
                @navigate.performed += instance.OnNavigate;
                @navigate.canceled += instance.OnNavigate;
            }

            private void UnregisterCallbacks(IMenuActions instance)
            {
                @submit.started -= instance.OnSubmit;
                @submit.performed -= instance.OnSubmit;
                @submit.canceled -= instance.OnSubmit;
                @navigate.started -= instance.OnNavigate;
                @navigate.performed -= instance.OnNavigate;
                @navigate.canceled -= instance.OnNavigate;
            }

            public void RemoveCallbacks(IMenuActions instance)
            {
                if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMenuActions instance)
            {
                foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MenuActions @menu => new MenuActions(this);

        // gameplay
        private readonly InputActionMap m_gameplay;
        private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
        private readonly InputAction m_gameplay_p1Left;
        private readonly InputAction m_gameplay_p1Right;
        private readonly InputAction m_gameplay_p1Attack;
        private readonly InputAction m_gameplay_p2Left;
        private readonly InputAction m_gameplay_p2Right;
        private readonly InputAction m_gameplay_p2Attack;
        private readonly InputAction m_gameplay_cancel;
        private readonly InputAction m_gameplay_debugDraw;
        private readonly InputAction m_gameplay_debugPause;
        private readonly InputAction m_gameplay_debugPauseAdvance;
        public struct GameplayActions
        {
            private @InputManagerGenerated m_Wrapper;
            public GameplayActions(@InputManagerGenerated wrapper) { m_Wrapper = wrapper; }
            public InputAction @p1Left => m_Wrapper.m_gameplay_p1Left;
            public InputAction @p1Right => m_Wrapper.m_gameplay_p1Right;
            public InputAction @p1Attack => m_Wrapper.m_gameplay_p1Attack;
            public InputAction @p2Left => m_Wrapper.m_gameplay_p2Left;
            public InputAction @p2Right => m_Wrapper.m_gameplay_p2Right;
            public InputAction @p2Attack => m_Wrapper.m_gameplay_p2Attack;
            public InputAction @cancel => m_Wrapper.m_gameplay_cancel;
            public InputAction @debugDraw => m_Wrapper.m_gameplay_debugDraw;
            public InputAction @debugPause => m_Wrapper.m_gameplay_debugPause;
            public InputAction @debugPauseAdvance => m_Wrapper.m_gameplay_debugPauseAdvance;
            public InputActionMap Get() { return m_Wrapper.m_gameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
            public void AddCallbacks(IGameplayActions instance)
            {
                if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
                @p1Left.started += instance.OnP1Left;
                @p1Left.performed += instance.OnP1Left;
                @p1Left.canceled += instance.OnP1Left;
                @p1Right.started += instance.OnP1Right;
                @p1Right.performed += instance.OnP1Right;
                @p1Right.canceled += instance.OnP1Right;
                @p1Attack.started += instance.OnP1Attack;
                @p1Attack.performed += instance.OnP1Attack;
                @p1Attack.canceled += instance.OnP1Attack;
                @p2Left.started += instance.OnP2Left;
                @p2Left.performed += instance.OnP2Left;
                @p2Left.canceled += instance.OnP2Left;
                @p2Right.started += instance.OnP2Right;
                @p2Right.performed += instance.OnP2Right;
                @p2Right.canceled += instance.OnP2Right;
                @p2Attack.started += instance.OnP2Attack;
                @p2Attack.performed += instance.OnP2Attack;
                @p2Attack.canceled += instance.OnP2Attack;
                @cancel.started += instance.OnCancel;
                @cancel.performed += instance.OnCancel;
                @cancel.canceled += instance.OnCancel;
                @debugDraw.started += instance.OnDebugDraw;
                @debugDraw.performed += instance.OnDebugDraw;
                @debugDraw.canceled += instance.OnDebugDraw;
                @debugPause.started += instance.OnDebugPause;
                @debugPause.performed += instance.OnDebugPause;
                @debugPause.canceled += instance.OnDebugPause;
                @debugPauseAdvance.started += instance.OnDebugPauseAdvance;
                @debugPauseAdvance.performed += instance.OnDebugPauseAdvance;
                @debugPauseAdvance.canceled += instance.OnDebugPauseAdvance;
            }

            private void UnregisterCallbacks(IGameplayActions instance)
            {
                @p1Left.started -= instance.OnP1Left;
                @p1Left.performed -= instance.OnP1Left;
                @p1Left.canceled -= instance.OnP1Left;
                @p1Right.started -= instance.OnP1Right;
                @p1Right.performed -= instance.OnP1Right;
                @p1Right.canceled -= instance.OnP1Right;
                @p1Attack.started -= instance.OnP1Attack;
                @p1Attack.performed -= instance.OnP1Attack;
                @p1Attack.canceled -= instance.OnP1Attack;
                @p2Left.started -= instance.OnP2Left;
                @p2Left.performed -= instance.OnP2Left;
                @p2Left.canceled -= instance.OnP2Left;
                @p2Right.started -= instance.OnP2Right;
                @p2Right.performed -= instance.OnP2Right;
                @p2Right.canceled -= instance.OnP2Right;
                @p2Attack.started -= instance.OnP2Attack;
                @p2Attack.performed -= instance.OnP2Attack;
                @p2Attack.canceled -= instance.OnP2Attack;
                @cancel.started -= instance.OnCancel;
                @cancel.performed -= instance.OnCancel;
                @cancel.canceled -= instance.OnCancel;
                @debugDraw.started -= instance.OnDebugDraw;
                @debugDraw.performed -= instance.OnDebugDraw;
                @debugDraw.canceled -= instance.OnDebugDraw;
                @debugPause.started -= instance.OnDebugPause;
                @debugPause.performed -= instance.OnDebugPause;
                @debugPause.canceled -= instance.OnDebugPause;
                @debugPauseAdvance.started -= instance.OnDebugPauseAdvance;
                @debugPauseAdvance.performed -= instance.OnDebugPauseAdvance;
                @debugPauseAdvance.canceled -= instance.OnDebugPauseAdvance;
            }

            public void RemoveCallbacks(IGameplayActions instance)
            {
                if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameplayActions instance)
            {
                foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameplayActions @gameplay => new GameplayActions(this);
        public interface IMenuActions
        {
            void OnSubmit(InputAction.CallbackContext context);
            void OnNavigate(InputAction.CallbackContext context);
        }
        public interface IGameplayActions
        {
            void OnP1Left(InputAction.CallbackContext context);
            void OnP1Right(InputAction.CallbackContext context);
            void OnP1Attack(InputAction.CallbackContext context);
            void OnP2Left(InputAction.CallbackContext context);
            void OnP2Right(InputAction.CallbackContext context);
            void OnP2Attack(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
            void OnDebugDraw(InputAction.CallbackContext context);
            void OnDebugPause(InputAction.CallbackContext context);
            void OnDebugPauseAdvance(InputAction.CallbackContext context);
        }
    }
}
